<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LF.Toolkit.IOC</name>
    </assembly>
    <members>
        <member name="T:LF.Toolkit.IOC.IProxyStorage">
            <summary>
            代理存储接口标识
            </summary>
        </member>
        <member name="P:LF.Toolkit.IOC.IProxyStorage.Container">
            <summary>
            Autofac存储实现类容器实例
            </summary>
        </member>
        <member name="T:LF.Toolkit.IOC.BaseProxyStorage`1">
            <summary>
            代理存储基类
            </summary>
            <typeparam name="T">缓存类类型</typeparam>
        </member>
        <member name="P:LF.Toolkit.IOC.BaseProxyStorage`1.ProxyStorage">
            <summary>
            获取当前代理的存储类实例
            </summary>
        </member>
        <member name="P:LF.Toolkit.IOC.BaseProxyStorage`1.Container">
            <summary>
            获取存储类容器
            </summary>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseProxyStorage`1.#ctor(Autofac.IContainer)">
            <summary>
            
            </summary>
            <param name="container">包含实际存储类的容器</param>
        </member>
        <member name="T:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1">
            <summary>
            带有缓存的代理存储基类
            </summary>
            <typeparam name="T">缓存类类型</typeparam>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.#ctor(Autofac.IContainer)">
            <summary>
            
            </summary>
            <param name="container">包含实际存储类的容器</param>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.SetCache(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            使用键和值将某个缓存项插入缓存中，并指定基于时间的过期详细信息
            </summary>
            <param name="key">缓存键名</param>
            <param name="value">缓存值</param>
            <param name="expiration">若为空则设置为最大值</param>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.TryGetCache``1(System.String,``0@)">
            <summary>
            获取指定名称的缓存对象
            </summary>
            <typeparam name="TSource">对象类型</typeparam>
            <param name="key">缓存键名</param>
            <param name="value">缓存值</param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.Contians(System.String)">
            <summary>
            获取缓存中是否包含指定键名的缓存项
            </summary>
            <param name="key">缓存键名</param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.RemoveCache(System.String)">
            <summary>
            删除指定名称的缓存对象
            </summary>
            <param name="key">缓存键名</param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.GetCacheInstance">
            <summary>
            获取当前类的缓存对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.AddToListCache``1(System.String,``0,System.Predicate{``0},System.TimeSpan,System.Int32)">
            <summary>
            将指定对象添加到对象列表缓存中，若添加不成功则返回false
            【此操作是线程安全的】
            </summary>
            <typeparam name="TSource">对象类型</typeparam>
            <param name="key">列表缓存的键名</param>
            <param name="value">缓存类型对象</param>
            <param name="predicate">删除缓存中与当前对象匹配的条件</param>
            <param name="expires">缓存过期时间</param>
            <param name="waitSeconds">线程锁等待时间</param>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.RemoveAllFromListCache``1(System.String,System.Predicate{``0},System.TimeSpan,System.Int32)">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素。
            【此操作是线程安全的】
            </summary>
            <typeparam name="TSource">对象类型</typeparam>
            <param name="key">列表缓存的键名</param>
            <param name="predicate">删除查找条件</param>
            <param name="expires">缓存过期时间</param>
            <param name="waitSeconds">线程锁等待时间</param>
        </member>
        <member name="M:LF.Toolkit.IOC.BaseMemoryCacheProxyStorage`1.FindOneFromListCache``1(System.String,System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            从对象列表缓存中获取符合指定条件的第一个对象
            【此操作是线程安全的】
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="key">列表缓存的键名</param>
            <param name="predicate">查找条件</param>
            <param name="waitSeconds">线程锁等待时间</param>
            <returns></returns>
        </member>
        <member name="T:LF.Toolkit.IOC.InjectableAttribute">
            <summary>
            全局注入标签类
            </summary>
        </member>
        <member name="P:LF.Toolkit.IOC.InjectableAttribute.AsSelf">
            <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
        </member>
        <member name="P:LF.Toolkit.IOC.InjectableAttribute.AsImplementedInterfaces">
            <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
        </member>
        <member name="P:LF.Toolkit.IOC.InjectableAttribute.SingleInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve() gets the same, shared instance.
            </summary>
        </member>
        <member name="T:LF.Toolkit.IOC.InjectionContainer">
            <summary>
            全局注入容器类
            </summary>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.EnsureNotInitialize(System.Action)">
            <summary>
            确认当前容器未初始
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.EnsureInitialize``1(System.Func{``0})">
            <summary>
            确认当前容器已经初始化
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Register components to be created through reflection. which components is marked InjectableAttribute
            </summary>
            <param name="assembly"></param>
            <param name="parameters">实例化参数</param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register(System.String,System.Type,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register components to be created through reflection. which components is marked attributeType
            </summary>
            <param name="assemblyString"></param>
            <param name="attributeType"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register(System.Reflection.Assembly,System.Type,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register components to be created through reflection. which components is marked attributeType
            </summary>
            <param name="assembly"></param>
            <param name="attributeType"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register``1(System.String,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register components to be created through reflection. which components Inherited from T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblyString">The long form of the assembly name.</param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register``1(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register components to be created through reflection. which components Inherited from T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Register(System.Type,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Build(System.Action{Autofac.ContainerBuilder},System.Action{Autofac.IContainer})">
            <summary>
            Create a new container with the component registrations that have been made.
            </summary>
            <param name="beforBuild"></param>
            <param name="afterBuild"></param>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Resolve``1">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.Resolve(System.Type)">
            <summary>
             Retrieve a service from the context.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.IsRegistered``1">
            <summary>
            判断指定类型是否注册过
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainer.IsRegistered(System.Type)">
            <summary>
            判断指定类型是否注册过
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:LF.Toolkit.IOC.InjectionContainerBuilder">
            <summary>
            注入容器生成类
            </summary>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainerBuilder.Build(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Action{Autofac.ContainerBuilder})">
            <summary>
            Create a new container with the component registrations (which components is marked InjectableAttribute) that have been made. 
            </summary>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <param name="beforBuild"></param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainerBuilder.Build``1(System.String,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Create a new container with the component registrations (which components Inherited from T) that have been made.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblyString"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
            <param name="beforBuild"></param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainerBuilder.Build``1(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Create a new container with the component registrations (which components Inherited from T) that have been made.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
            <param name="beforBuild"></param>
            <returns></returns>
        </member>
        <member name="M:LF.Toolkit.IOC.InjectionContainerBuilder.Register(Autofac.ContainerBuilder,System.Type,System.Collections.Generic.IDictionary{System.Type,System.Object},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="containerBuilder"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <param name="asSelf"></param>
            <param name="asImplementedInterfaces"></param>
            <param name="singleInstance"></param>
        </member>
    </members>
</doc>
